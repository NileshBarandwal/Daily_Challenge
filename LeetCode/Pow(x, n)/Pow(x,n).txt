// 50. Pow(x, n)

class Solution {
public:
    double myPow(double x, int n) {
        // Edge Case
        if (n == 0) {
            return 1;
        }

        // Use long long to handle edge cases like n = INT_MIN

        // When n is INT_MIN, negating it (-n) will result in overflow because INT_MIN is the minimum value that can be represented by an int, 
	// and its absolute value is not representable in the positive range of int. By using long long N, 
	// we ensure that the conversion to its absolute value (-N) won't result in overflow.

        long long N = n;
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }
        // for -ve n x convert to 1/x rest same for both operations
        
        double result = 1.0;
        double current_product = x;

        while (N > 0) {
            if (N % 2 == 1) {
                result *= current_product;
            }
            current_product *= current_product;
            N /= 2;
        }

        return result;
    }
};