// 1482. Minimum Number of Days to Make m Bouquets

class Solution {
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        // m = no. of boque and k=3 i.e. each boque will have atleast 3 flowers
        // So, if m=2 k=3 total 2*3=6 flower to pick from given array else return -1;
        if((long long)(m)*k > bloomDay.size()){
            return -1;
        }
        // array cannot be sorted as each element represent blooming day
        // and we want k adjacent flowers from the garden.
        // Instead of X will use count to count adj blooming flower
        int mini = INT_MAX;
        int maxi = INT_MIN;
        for(int i=0;i<bloomDay.size();i++){
            mini = min(mini, bloomDay[i]);
            maxi = max(maxi, bloomDay[i]);
        }
        int low = mini, high = maxi;

	// Binary Search - Left and Right part each of mid
        
        while (low < high) {
            long long mid = (long long)(low) + (high - low) / 2;
            int flowers = 0;
            int bouquets = 0;

            // Check if we can make m bouquets by mid days
            for (int bloom : bloomDay) {
                if (bloom <= mid) {
                    flowers++;
                    if (flowers == k) {
                        bouquets++;
                        flowers = 0;
                    }
                } else {
                    flowers = 0;
                }

                if (bouquets >= m) {
                    break;
                }
            }

            if (bouquets >= m) {
                high = mid;  // Try for fewer days
            } else {
                low = mid + 1;  // Increase the days
            }
        }

        return low;
    }
};

// Binary Search Execution

// First Iteration:

// mid = (low + high) / 2 = (1 + 10) / 2 = 5
// Check if we can make 3 bouquets by 5 days:
// Iterate through bloomDay and count bouquets:
// bloomDay[0] = 1 (bloomed by day 5), flowers = 1, bouquets = 1
// bloomDay[1] = 10 (not bloomed by day 5), flowers = 0
// bloomDay[2] = 3 (bloomed by day 5), flowers = 1, bouquets = 2
// bloomDay[3] = 10 (not bloomed by day 5), flowers = 0
// bloomDay[4] = 2 (bloomed by day 5), flowers = 1, bouquets = 3
// We can make 3 bouquets by 5 days.
// Since we can make 3 bouquets, we set high = mid = 5.

// Second Iteration:

// mid = (low + high) / 2 = (1 + 5) / 2 = 3
// Check if we can make 3 bouquets by 3 days:
// Iterate through bloomDay and count bouquets:
// bloomDay[0] = 1 (bloomed by day 3), flowers = 1, bouquets = 1
// bloomDay[1] = 10 (not bloomed by day 3), flowers = 0
// bloomDay[2] = 3 (bloomed by day 3), flowers = 1, bouquets = 2
// bloomDay[3] = 10 (not bloomed by day 3), flowers = 0
// bloomDay[4] = 2 (bloomed by day 3), flowers = 1, bouquets = 3
// We can make 3 bouquets by 3 days.
// Since we can make 3 bouquets, we set high = mid = 3.

// Third Iteration:

// mid = (low + high) / 2 = (1 + 3) / 2 = 2
// Check if we can make 3 bouquets by 2 days:
// Iterate through bloomDay and count bouquets:
// bloomDay[0] = 1 (bloomed by day 2), flowers = 1, bouquets = 1
// bloomDay[1] = 10 (not bloomed by day 2), flowers = 0
// bloomDay[2] = 3 (not bloomed by day 2), flowers = 0
// bloomDay[3] = 10 (not bloomed by day 2), flowers = 0
// bloomDay[4] = 2 (bloomed by day 2), flowers = 1, bouquets = 2
// We can only make 2 bouquets by 2 days.

// Since we cannot make 3 bouquets, we set low = mid + 1 = 3.

// Conclusion

// At this point, low is equal to high (both are 3), so the minimum number of days required to make 3 bouquets is 3.